/*
Influenza Data Exploration 

Skills used: Joins, CTEs, Temp Tables, Window Functions, Aggregate Functions, Creating Views, Converting Data Types
*/

SELECT * 
FROM PortfolioProject.InfluenzaDeaths 
WHERE country IS NOT NULL 
ORDER BY 3,4;

-- Select all data 

SELECT Location, date, total_cases, new_cases, total_deaths, population 
FROM PortfolioProject.InfluenzaDeaths 
WHERE country IS NOT NULL 
ORDER BY 1,2;

-- Total Cases vs Total Deaths
-- Shows likelihood of dying if you contract influenza in your country

SELECT Location, date, total_cases, total_deaths, 
       (total_deaths / total_cases) * 100 AS DeathPercentage 
FROM PortfolioProject.InfluenzaDeaths 
WHERE Location LIKE '%states%' 
AND country IS NOT NULL 
ORDER BY 1,2;

-- Total Cases vs Population
-- Shows what percentage of population infected with Influenza

SELECT Location, date, Population, total_cases,  
       (total_cases / population) * 100 AS PercentPopulationInfected 
FROM PortfolioProject.InfluenzaDeaths 
ORDER BY 1,2;

-- Countries with Highest Infection Rate compared to Population

SELECT Location, Population, MAX(total_cases) AS HighestInfectionCount,  
       MAX((total_cases / population) * 100) AS PercentPopulationInfected 
FROM PortfolioProject.InfluenzaDeaths 
GROUP BY Location, Population 
ORDER BY PercentPopulationInfected DESC;

-- Countries with Highest Death Count per Population

SELECT Location, MAX(CAST(total_deaths AS UNSIGNED)) AS TotalDeathCount 
FROM PortfolioProject.InfluenzaDeaths 
WHERE country IS NOT NULL 
GROUP BY Location 
ORDER BY TotalDeathCount DESC;

-- BREAKING THINGS DOWN BY COUNTRY

-- Showing countries with the highest death count per population

SELECT country, MAX(CAST(total_deaths AS UNSIGNED)) AS TotalDeathCount 
FROM PortfolioProject.InfluenzaDeaths 
WHERE country IS NOT NULL 
GROUP BY country 
ORDER BY TotalDeathCount DESC;

-- GLOBAL NUMBERS

SELECT SUM(new_cases) AS total_cases, 
       SUM(CAST(new_deaths AS UNSIGNED)) AS total_deaths, 
       (SUM(CAST(new_deaths AS UNSIGNED)) / SUM(new_cases)) * 100 AS DeathPercentage 
FROM PortfolioProject.InfluenzaDeaths 
WHERE country IS NOT NULL 
ORDER BY 1,2;

-- Total Population vs Vaccinations
-- Shows Percentage of Population that has received at least one Influenza Vaccine

SELECT dea.country, dea.location, dea.date, dea.population, vac.new_vaccinations, 
       SUM(CAST(vac.new_vaccinations AS UNSIGNED)) OVER (PARTITION BY dea.Location ORDER BY dea.location, dea.Date) 
       AS RollingPeopleVaccinated 
FROM PortfolioProject.InfluenzaDeaths dea 
JOIN PortfolioProject.InfluenzaVaccinations vac 
ON dea.location = vac.location 
AND dea.date = vac.date 
WHERE dea.country IS NOT NULL 
ORDER BY 2,3;

-- Using CTE to perform Calculation on Partition By in previous query

WITH PopvsVac (Country, Location, Date, Population, New_Vaccinations, RollingPeopleVaccinated) AS 
(
    SELECT dea.country, dea.location, dea.date, dea.population, vac.new_vaccinations, 
           SUM(CAST(vac.new_vaccinations AS UNSIGNED)) OVER (PARTITION BY dea.Location ORDER BY dea.location, dea.Date) 
           AS RollingPeopleVaccinated 
    FROM PortfolioProject.InfluenzaDeaths dea 
    JOIN PortfolioProject.InfluenzaVaccinations vac 
    ON dea.location = vac.location 
    AND dea.date = vac.date 
    WHERE dea.country IS NOT NULL 
)
SELECT *, (RollingPeopleVaccinated / Population) * 100 
FROM PopvsVac;

-- Using Temp Table to perform Calculation on Partition By in previous query

DROP TEMPORARY TABLE IF EXISTS PercentPopulationVaccinated;
CREATE TEMPORARY TABLE PercentPopulationVaccinated (
    Country VARCHAR(255),
    Location VARCHAR(255),
    Date DATETIME,
    Population NUMERIC,
    New_vaccinations NUMERIC,
    RollingPeopleVaccinated NUMERIC
);

INSERT INTO PercentPopulationVaccinated
SELECT dea.country, dea.location, dea.date, dea.population, vac.new_vaccinations, 
       SUM(CAST(vac.new_vaccinations AS UNSIGNED)) OVER (PARTITION BY dea.Location ORDER BY dea.location, dea.Date) 
       AS RollingPeopleVaccinated 
FROM PortfolioProject.InfluenzaDeaths dea 
JOIN PortfolioProject.InfluenzaVaccinations vac 
ON dea.location = vac.location 
AND dea.date = vac.date;

SELECT *, (RollingPeopleVaccinated / Population) * 100 
FROM PercentPopulationVaccinated;

-- Creating View to store data for later visualizations

CREATE OR REPLACE VIEW PercentPopulationVaccinated AS 
SELECT dea.country, dea.location, dea.date, dea.population, vac.new_vaccinations, 
       SUM(CAST(vac.new_vaccinations AS UNSIGNED)) OVER (PARTITION BY dea.Location ORDER BY dea.location, dea.Date) 
       AS RollingPeopleVaccinated 
FROM PortfolioProject.InfluenzaDeaths dea 
JOIN PortfolioProject.InfluenzaVaccinations vac 
ON dea.location = vac.location 
AND dea.date = vac.date 
WHERE dea.country IS NOT NULL;
